
R version 4.2.2 Patched (2022-11-10 r83330) -- "Innocent and Trusting"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> setwd('/home/mikeg/Repositories/ZEFI-Thermal-Curves/code/2023-02-08_brms_two.piece_focus.on.x0.fittings')
> + + + + + + + + + + + + + + + Error in ss(file, echo = visibly, local = local, print.eval = output,  : 
  /tmp/focus.on.estimating.x0.fittings.Rmd!smIa1D:10:23: unexpected symbol
9:                       echo = TRUE  # show R code
10:                       fig.width
                          ^
> + + + + + + + + + + + + + + + + + + + + + + + + + + + + + > # install packages user might not have by replacing FALSE with TRUE
> 
> ## load libraries
> library(stats)
> library(MASS) # provides negative binomial fitting:  glm.nb
> library(ggplot2)
> library(ggpubr)
> library(grid)
> library(gridExtra)
> library(GGally)
Registered S3 method overwritten by 'GGally':
  method from   
  +.gg   ggplot2
> library(broom)
> library(tidyverse)
── Attaching packages ───────────────────────────────────────────────────────────────────── tidyverse 1.3.2 ──
✔ tibble  3.1.8     ✔ dplyr   1.1.0
✔ tidyr   1.3.0     ✔ stringr 1.5.0
✔ readr   2.1.3     ✔ forcats 1.0.0
✔ purrr   1.0.1     
── Conflicts ──────────────────────────────────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::combine() masks gridExtra::combine()
✖ dplyr::filter()  masks stats::filter()
✖ dplyr::lag()     masks stats::lag()
✖ dplyr::select()  masks MASS::select()
> library(viridisLite)
> library(cmdstanr)
This is cmdstanr version 0.5.3
- CmdStanR documentation and vignettes: mc-stan.org/cmdstanr
- CmdStan path: /home/mikeg/.cmdstan/cmdstan-2.31.0
- CmdStan version: 2.31.0
> library(rstan)
Loading required package: StanHeaders

rstan version 2.26.13 (Stan version 2.26.1)

For execution on a local, multicore CPU with excess RAM we recommend calling
options(mc.cores = parallel::detectCores()).
To avoid recompilation of unchanged Stan programs, we recommend calling
rstan_options(auto_write = TRUE)
For within-chain threading using `reduce_sum()` or `map_rect()` Stan functions,
change `threads_per_chain` option:
rstan_options(threads_per_chain = 1)


Attaching package: ‘rstan’

The following object is masked from ‘package:tidyr’:

    extract

> options(mc.cores = 4) #(parallel::detectCores()-2))
> rstan_options(auto_write = TRUE)
> library(brms)
Loading required package: Rcpp
Loading 'brms' package (version 2.18.0). Useful instructions
can be found by typing help('brms'). A more detailed introduction
to the package is available through vignette('brms_overview').

Attaching package: ‘brms’

The following object is masked from ‘package:rstan’:

    loo

The following object is masked from ‘package:stats’:

    ar

> library(loo)
This is loo version 2.5.1
- Online documentation and vignettes at mc-stan.org/loo
- As of v2.0.0 loo defaults to 1 core but we recommend using as many as possible. Use the 'cores' argument or set options(mc.cores = NUM_CORES) for an entire session. 

Attaching package: ‘loo’

The following object is masked from ‘package:rstan’:

    loo

> library(shinystan)
Loading required package: shiny

This is shinystan version 2.6.0

> ## options(ggplot2.continuous.colour="viridis",
> ##        ggplot2.discrete.colour="viridis",
> ##        ggplot2.scale_fill_discrete = scale_fill_viridis_d,
> ##        ggplot2.scale_fill_continuous = scale_fill_viridis_c)
> 
> library(reshape2)

Attaching package: ‘reshape2’

The following object is masked from ‘package:tidyr’:

    smiths

> library(lme4)
Loading required package: Matrix

Attaching package: ‘Matrix’

The following objects are masked from ‘package:tidyr’:

    expand, pack, unpack


Attaching package: ‘lme4’

The following object is masked from ‘package:brms’:

    ngrps

> library(latex2exp)
> + + + + + + + > input_dir <- file.path("input")
> output_dir <- file.path("output")
> load(file.path(input_dir, "data.processing_2022-12-15.Rda"),
+      verbose = TRUE)
Loading objects:
  motif_data
  motif_data_40C
  motif_stats
  motif_stats_40C
  bird_bill_data
> motif_data
# A tibble: 146 × 28
   male  round trial_round motif…¹ motif…² temp_…³ humid…⁴ chamber date  counter
   <fct> <dbl>       <dbl>   <int>   <dbl>   <dbl>   <dbl> <fct>   <chr> <chr>  
 1 T229      1           1       0 0          45.8      NA 6       02/1… KIM    
 2 T229      1           2      24 0.0131     42.3      NA 6       02/1… KIM    
 3 T229      1           3     114 0.0622     40.7      NA 6       02/1… KIM    
 4 T229      1           4     198 0.108      26.2      NA 6       02/1… KIM    
 5 T229      1           5     315 0.172      34.9      NA 6       02/2… KIM    
 6 T231      1           1      57 0.0431     42.8      NA 2       02/1… RAS    
 7 T231      1           2       7 0.00529    45.0      NA 2       02/1… RAS    
 8 T231      1           3      86 0.0650     41.1      NA 2       02/1… KIM    
 9 T231      1           4      24 0.0181     27.2      NA 2       02/1… RAS    
10 T231      1           5     215 0.162      36.5      NA 2       02/2… RAS    
# … with 136 more rows, 18 more variables: test_order <int>, temp_target <dbl>,
#   temp_median <dbl>, humdity_mean <dbl>, motif_rate <dbl>, mass <dbl>,
#   n_obs_completed <lgl>, motif_count_plus_1 <int>,
#   log_motif_count_plus_1 <dbl>, temp <dbl>, n_obs_round <int>, n_obs <int>,
#   trial <int>, motif_prop_round <dbl>, weights <dbl>, svp <dbl>, vpd <dbl>,
#   vpd_offset <dbl>, and abbreviated variable names ¹​motif_count, ²​motif_prop,
#   ³​temp_mean, ⁴​humidity_mean
# ℹ Use `print(n = ...)` to see more rows, and `colnames()` to see all variable names
> + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + > filter_data <- TRUE
> if(filter_data) {
+     males_filtered_disp <- motif_stats_40C %>%
+         filter(dispersion < 50) %>%
+         pull(male)
+ 
+     males_filtered_mean <- motif_stats %>%
+         filter(mean > 10) %>% # changing from 10 to 40 removes previous male 7 (T258)
+         pull(male)
+ 
+     male_v .... [TRUNCATED] 
> data_ind <- motif_data %>%
+     filter(male %in% male_vector) %>%
+     mutate(male = droplevels(male)) %>%
+     mutate(index = as.integer(male)) %>%
+     mutate(male = as.character(male)) %>% 
+     arrange(index) %>%
+     select(male, index, motif_count, temp_target, temp, round, trial_round .... [TRUNCATED] 
> stats_ind <- motif_stats %>%
+     filter(male %in% male_vector) 
> data_ind <- data_ind %>% filter(temp < 38) %>%
+     group_by(male) %>% mutate(y0_simple.est = mean(motif_count), phi_ind = var(motif_count)/y0_simple.est) %>% ## phi is overdispersion parameter
+     ungroup()
> summary(data_ind)
     male               index         motif_count     temp_target   
 Length:38          Min.   : 1.000   Min.   :  0.0   Min.   :27.00  
 Class :character   1st Qu.: 3.000   1st Qu.: 52.5   1st Qu.:27.00  
 Mode  :character   Median : 5.500   Median : 89.0   Median :35.00  
                    Mean   : 5.579   Mean   :112.9   Mean   :31.61  
                    3rd Qu.: 8.000   3rd Qu.:167.2   3rd Qu.:35.00  
                    Max.   :11.000   Max.   :425.0   Max.   :40.00  
      temp           round        trial_round        date          
 Min.   :25.71   Min.   :1.000   Min.   :1.000   Length:38         
 1st Qu.:29.51   1st Qu.:1.000   1st Qu.:2.000   Class :character  
 Median :33.52   Median :3.000   Median :3.000   Mode  :character  
 Mean   :31.88   Mean   :2.211   Mean   :3.105                     
 3rd Qu.:34.34   3rd Qu.:3.000   3rd Qu.:4.000                     
 Max.   :37.64   Max.   :3.000   Max.   :6.000                     
   counter          y0_simple.est       phi_ind       
 Length:38          Min.   : 24.00   Min.   :  0.142  
 Class :character   1st Qu.: 64.33   1st Qu.:  6.955  
 Mode  :character   Median : 93.20   Median : 12.986  
                    Mean   :112.89   Mean   : 33.913  
                    3rd Qu.:166.38   3rd Qu.: 48.000  
                    Max.   :246.25   Max.   :128.361  
> n_male <- length(unique(data_ind$male))
> ## for calculation of 'theta_bar' (size in `rnbinom`) see note in `Set Up Simulate Data`
> summary_stats <- data_ind %>% ungroup() %>%  summarize(y0_bar = mean(y0_simple.est), y0_sd = sd(y0_simple.est), phi_bar = median(phi_ind), theta_bar = y0_bar^2/(y0_sd^2 - y0_bar))
> comment(summary_stats) <- "summary stats for observed bird motifs"
> #save(summary_stats, file = file.path(output_dir, "obs_summary_stats.Rda"))
> names(data_ind)
 [1] "male"          "index"         "motif_count"   "temp_target"  
 [5] "temp"          "round"         "trial_round"   "date"         
 [9] "counter"       "y0_simple.est" "phi_ind"      
> + + + + + + + + + + + + + + + > xmax <- 46
> x0max <- xmax - 0.5;
> x0min <- 20;
> y_xmax <- 0
> y0_min <- 10
> sd_y0_prior <- 200
> alpha_theta_prior <- 10 ## exponential dist scale parameter for overdispersion theta in quasipoisson
> alpha_phi_prior <- 0.01 ## gamma dist shape parameter for nb. brms default is 0.01
> beta_phi_prior <- 0.01 ## gamma dist rate parameter for nb. brms default is 0.01
> ## values to use for model predictions
> x_for_predictions = seq(25, xmax, length.out = 100)
> n_cores <- 4
> n_chains <- n_cores
> 
> data <- data_ind %>% mutate(x0_group = NA, y0_group = NA)
> + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + > adapt_delta <- 0.95 #0.95
> iter <- 4000
> thin <- 1
> model <- c("brms")
> sampling_dist_fit <- "nb" 
> flags_x <- c("uniform_1", "groups_1")
> flags_y <- c("individual", "groups_1")
> N <- length(data)
> fit_tbl <- crossing(model = models,
+                     sampling_dist = sampling_dist_fit,
+                     x0_flag = flags_x, y0_flag = flags_y,
+                     desc = "NA_character",
+                     y0_group_list = list(NA), #tbl_tmp, #list(NA),
+                     x0_group_ .... [TRUNCATED] 
Error in eval_tidy(dot, data = mask) : object 'models' not found
> + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + > adapt_delta <- 0.95 #0.95
> iter <- 4000
> thin <- 1
> #models <- c("brms")
> #sampling_dist_fit <- "nb" 
> flags_x <- c("uniform_1", "groups_1")
> flags_y <- c("individual", "groups_1")
> N <- length(data)
> fit_tbl <- crossing(#model = models,
+                     #sampling_dist = sampling_dist_fit,
+                     x0_flag = flags_x, y0_flag = flags_y,
+                     desc = "NA_character",
+                     y0_group_list = list(NA), #tbl_tmp, #list(NA),
+                     x0_grou .... [TRUNCATED] 
> ## Priors
> 
> my_priors <- prior(
+   # uniform(10, 1000), nlpar = "y0", lb = 10) +
+   normal(150, 200), nlpar = "y0", lb = 10) +
+   prior(uniform(30, 45.5), lb = 30, ub = 45.5, nlpar = "x0")
> ## Run Analysis
> for(x_flag in flags_x) {
+     for(y_flag in flags_y) {
+ 
+         ## Set up variables for saving model and fit
+         desc <- paste0(model, ": ", x_flag, ", ", y_flag)
+         curr_row <- which(fit_tbl$model == model &
+                           fit_tbl$x0_flag == x_flag .... [TRUNCATED] 
Warning: Unknown or uninitialised column: `model`.
[1] "brms: uniform_1, individual"
Error in eval(ei, envir) : object 'data_base' not found
> 
> data_base <- data_ind %>% mutate(x0_group = NA, y0_group = NA)
> + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + > adapt_delta <- 0.95 #0.95
> iter <- 4000
> thin <- 1
> #models <- c("brms")
> #sampling_dist_fit <- "nb" 
> flags_x <- c("uniform_1", "groups_1")
> flags_y <- c("individual", "groups_1")
> N <- length(data)
> fit_tbl <- crossing(#model = models,
+                     #sampling_dist = sampling_dist_fit,
+                     x0_flag = flags_x, y0_flag = flags_y,
+                     desc = "NA_character",
+                     y0_group_list = list(NA), #tbl_tmp, #list(NA),
+                     x0_grou .... [TRUNCATED] 
> ## Priors
> 
> my_priors <- prior(
+   # uniform(10, 1000), nlpar = "y0", lb = 10) +
+   normal(150, 200), nlpar = "y0", lb = 10) +
+   prior(uniform(30, 45.5), lb = 30, ub = 45.5, nlpar = "x0")
> ## Run Analysis
> for(x_flag in flags_x) {
+     for(y_flag in flags_y) {
+ 
+         ## Set up variables for saving model and fit
+         desc <- paste0(model, ": ", x_flag, ", ", y_flag)
+         curr_row <- which(fit_tbl$model == model &
+                           fit_tbl$x0_flag == x_flag .... [TRUNCATED] 
Warning: Unknown or uninitialised column: `model`.
[1] "brms: uniform_1, individual"
Error in `vectbl_as_row_location2()`:
! Can't assign row with `curr_row`.
✖ Subscript `curr_row` must be size 1, not 0.
Run `]8;;rstudio:run:rlang::last_error()rlang::last_error()]8;;` to see where the error occurred.
> + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + > adapt_delta <- 0.95 #0.95
> iter <- 4000
> thin <- 1
> #models <- c("brms")
> #sampling_dist_fit <- "nb" 
> flags_x <- c("uniform_1", "groups_1")
> flags_y <- c("individual", "groups_1")
> N <- length(data)
> fit_tbl <- crossing(#model = models,
+                     #sampling_dist = sampling_dist_fit,
+                     x0_flag = flags_x, y0_flag = flags_y,
+                     desc = "NA_character",
+                     y0_group_list = list(NA), #tbl_tmp, #list(NA),
+                     x0_grou .... [TRUNCATED] 
> ## Priors
> 
> my_priors <- prior(
+   # uniform(10, 1000), nlpar = "y0", lb = 10) +
+   normal(150, 200), nlpar = "y0", lb = 10) +
+   prior(uniform(30, 45.5), lb = 30, ub = 45.5, nlpar = "x0")
> ## Run Analysis
> for(x_flag in flags_x) {
+     for(y_flag in flags_y) {
+ 
+         ## Set up variables for saving model and fit
+         desc <- paste0(model, ": ", x_flag, ", ", y_flag)
+         curr_row <- which(#fit_tbl$model == model &
+                           fit_tbl$x0_flag == x_fla .... [TRUNCATED] 
[1] "brms: uniform_1, individual"
Error in h(simpleError(msg, call)) : 
  error in evaluating the argument 'x' in selecting a method for function 'print': The following variables can neither be found in 'data' nor in 'data2':
'y', 'x'
> data_ind
# A tibble: 38 × 11
   male  index motif…¹ temp_…²  temp round trial…³ date  counter y0_si…⁴ phi_ind
   <chr> <int>   <int>   <dbl> <dbl> <dbl>   <dbl> <chr> <chr>     <dbl>   <dbl>
 1 T234      1      34      27  27.2     1       3 02/0… RAS        51.8    6.11
 2 T234      1      52      35  36.1     1       5 02/1… RAS        51.8    6.11
 3 T234      1      76      35  34.8     3       2 06/2… KIM        51.8    6.11
 4 T234      1      45      27  29.8     3       4 06/2… KIM        51.8    6.11
 5 T235      2      10      35  34.3     1       2 02/1… KIM       246.   128.  
 6 T235      2     327      27  26       1       5 02/2… KIM       246.   128.  
 7 T235      2     425      27  30.7     3       2 06/2… KIM       246.   128.  
 8 T235      2     223      35  33.9     3       4 06/3… KIM       246.   128.  
 9 T236      3     187      35  34.4     1       2 01/2… RAS       178      6.96
10 T236      3     126      27  25.9     1       4 01/3… RAS       178      6.96
# … with 28 more rows, and abbreviated variable names ¹​motif_count,
#   ²​temp_target, ³​trial_round, ⁴​y0_simple.est
# ℹ Use `print(n = ...)` to see more rows
> named(data_ind)
Error in named(data_ind) : could not find function "named"
> names(data_ind)
 [1] "male"          "index"         "motif_count"   "temp_target"  
 [5] "temp"          "round"         "trial_round"   "date"         
 [9] "counter"       "y0_simple.est" "phi_ind"      
> names(data_base)
 [1] "male"          "index"         "motif_count"   "temp_target"  
 [5] "temp"          "round"         "trial_round"   "date"         
 [9] "counter"       "y0_simple.est" "phi_ind"       "x0_group"     
[13] "y0_group"     
> + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + > adapt_delta <- 0.95 #0.95
> iter <- 4000
> thin <- 1
> #models <- c("brms")
> #sampling_dist_fit <- "nb" 
> flags_x <- c("uniform_1", "groups_1")
> flags_y <- c("individual", "groups_1")
> N <- length(data)
> fit_tbl <- crossing(#model = models,
+                     #sampling_dist = sampling_dist_fit,
+                     x0_flag = flags_x, y0_flag = flags_y,
+                     desc = "NA_character",
+                     y0_group_list = list(NA), #tbl_tmp, #list(NA),
+                     x0_grou .... [TRUNCATED] 
> ## Priors
> 
> my_priors <- prior(
+   # uniform(10, 1000), nlpar = "y0", lb = 10) +
+   normal(150, 200), nlpar = "y0", lb = 10) +
+   prior(uniform(30, 45.5), lb = 30, ub = 45.5, nlpar = "x0")
> ## Run Analysis
> for(x_flag in flags_x) {
+     for(y_flag in flags_y) {
+ 
+         ## Set up variables for saving model and fit
+         desc <- paste0(model, ": ", x_flag, ", ", y_flag)
+         curr_row <- which(#fit_tbl$model == model &
+                           fit_tbl$x0_flag == x_fla .... [TRUNCATED] 
[1] "brms: uniform_1, individual"
Error in h(simpleError(msg, call)) : 
  error in evaluating the argument 'x' in selecting a method for function 'print': The following variables can neither be found in 'data' nor in 'data2':
'y', 'x'
> head(data_base)
# A tibble: 6 × 13
  male  index motif_…¹ temp_…²  temp round trial…³ date  counter y0_si…⁴ phi_ind
  <chr> <int>    <int>   <dbl> <dbl> <dbl>   <dbl> <chr> <chr>     <dbl>   <dbl>
1 T234      1       34      27  27.2     1       3 02/0… RAS        51.8    6.11
2 T234      1       52      35  36.1     1       5 02/1… RAS        51.8    6.11
3 T234      1       76      35  34.8     3       2 06/2… KIM        51.8    6.11
4 T234      1       45      27  29.8     3       4 06/2… KIM        51.8    6.11
5 T235      2       10      35  34.3     1       2 02/1… KIM       246.   128.  
6 T235      2      327      27  26       1       5 02/2… KIM       246.   128.  
# … with 2 more variables: x0_group <lgl>, y0_group <lgl>, and abbreviated
#   variable names ¹​motif_count, ²​temp_target, ³​trial_round, ⁴​y0_simple.est
# ℹ Use `colnames()` to see all variable names
> 
> data_base <- data_ind %>%
+     mutate(x0_group = NA, y0_group = NA, male = factor(male)) %>%
+     rename(y = motif_count, x = temp) 
> + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + > adapt_delta <- 0.95 #0.95
> iter <- 4000
> thin <- 1
> #models <- c("brms")
> #sampling_dist_fit <- "nb" 
> flags_x <- c("uniform_1", "groups_1")
> flags_y <- c("individual", "groups_1")
> N <- length(data)
> fit_tbl <- crossing(#model = models,
+                     #sampling_dist = sampling_dist_fit,
+                     x0_flag = flags_x, y0_flag = flags_y,
+                     desc = "NA_character",
+                     y0_group_list = list(NA), #tbl_tmp, #list(NA),
+                     x0_grou .... [TRUNCATED] 
> ## Priors
> 
> my_priors <- prior(
+   # uniform(10, 1000), nlpar = "y0", lb = 10) +
+   normal(150, 200), nlpar = "y0", lb = 10) +
+   prior(uniform(30, 45.5), lb = 30, ub = 45.5, nlpar = "x0")
> ## Run Analysis
> for(x_flag in flags_x) {
+     for(y_flag in flags_y) {
+ 
+         ## Set up variables for saving model and fit
+         desc <- paste0(model, ": ", x_flag, ", ", y_flag)
+         curr_row <- which(#fit_tbl$model == model &
+                           fit_tbl$x0_flag == x_fla .... [TRUNCATED] 
[1] "brms: uniform_1, individual"
             prior class      coef group resp dpar nlpar lb ub       source
 gamma(0.01, 0.01) shape                                  0         default
            (flat)     b                              x0            default
            (flat)     b Intercept                    x0       (vectorized)
            (flat)     b                              y0            default
            (flat)     b  maleT234                    y0       (vectorized)
            (flat)     b  maleT235                    y0       (vectorized)
            (flat)     b  maleT236                    y0       (vectorized)
            (flat)     b  maleT237                    y0       (vectorized)
            (flat)     b  maleT243                    y0       (vectorized)
            (flat)     b  maleT244                    y0       (vectorized)
            (flat)     b  maleT246                    y0       (vectorized)
            (flat)     b  maleT247                    y0       (vectorized)
            (flat)     b  maleT257                    y0       (vectorized)
            (flat)     b  maleT258                    y0       (vectorized)
            (flat)     b  maleT260                    y0       (vectorized)
Compiling Stan program...
Start sampling

SAMPLING FOR MODEL 'anon_model' NOW (CHAIN 1).
Chain 1: 
Chain 1: Gradient evaluation took 0.00011 seconds
Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 1.1 seconds.
Chain 1: Adjust your expectations accordingly!
Chain 1: 
Chain 1: 
Chain 1: Iteration:    1 / 4000 [  0%]  (Warmup)

SAMPLING FOR MODEL 'anon_model' NOW (CHAIN 2).
Chain 2: 
Chain 2: Gradient evaluation took 7.3e-05 seconds
Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.73 seconds.
Chain 2: Adjust your expectations accordingly!
Chain 2: 
Chain 2: 
Chain 2: Iteration:    1 / 4000 [  0%]  (Warmup)

SAMPLING FOR MODEL 'anon_model' NOW (CHAIN 3).
Chain 3: 
Chain 3: Gradient evaluation took 7.4e-05 seconds
Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.74 seconds.
Chain 3: Adjust your expectations accordingly!
Chain 3: 
Chain 3: 
Chain 3: Iteration:    1 / 4000 [  0%]  (Warmup)

SAMPLING FOR MODEL 'anon_model' NOW (CHAIN 4).
Chain 4: 
Chain 4: Gradient evaluation took 0.000114 seconds
Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 1.14 seconds.
Chain 4: Adjust your expectations accordingly!
Chain 4: 
Chain 4: 
Chain 4: Iteration:    1 / 4000 [  0%]  (Warmup)
Chain 1: Iteration:  800 / 4000 [ 20%]  (Warmup)
Chain 2: Iteration:  800 / 4000 [ 20%]  (Warmup)
Chain 3: Iteration:  800 / 4000 [ 20%]  (Warmup)
Chain 4: Iteration:  800 / 4000 [ 20%]  (Warmup)
Chain 2: Iteration: 1600 / 4000 [ 40%]  (Warmup)
Chain 1: Iteration: 1600 / 4000 [ 40%]  (Warmup)
Chain 3: Iteration: 1600 / 4000 [ 40%]  (Warmup)
Chain 4: Iteration: 1600 / 4000 [ 40%]  (Warmup)
Chain 2: Iteration: 2001 / 4000 [ 50%]  (Sampling)
Chain 3: Iteration: 2001 / 4000 [ 50%]  (Sampling)
Chain 1: Iteration: 2001 / 4000 [ 50%]  (Sampling)
Chain 4: Iteration: 2001 / 4000 [ 50%]  (Sampling)
Chain 2: Iteration: 2800 / 4000 [ 70%]  (Sampling)
Chain 3: Iteration: 2800 / 4000 [ 70%]  (Sampling)
Chain 4: Iteration: 2800 / 4000 [ 70%]  (Sampling)
Chain 1: Iteration: 2800 / 4000 [ 70%]  (Sampling)
Chain 3: Iteration: 3600 / 4000 [ 90%]  (Sampling)
Chain 2: Iteration: 3600 / 4000 [ 90%]  (Sampling)
Chain 4: Iteration: 3600 / 4000 [ 90%]  (Sampling)
Chain 1: Iteration: 3600 / 4000 [ 90%]  (Sampling)
Chain 3: Iteration: 4000 / 4000 [100%]  (Sampling)
Chain 3: 
Chain 3:  Elapsed Time: 1.02 seconds (Warm-up)
Chain 3:                0.904 seconds (Sampling)
Chain 3:                1.924 seconds (Total)
Chain 3: 
Chain 2: Iteration: 4000 / 4000 [100%]  (Sampling)
Chain 2: 
Chain 2:  Elapsed Time: 0.995 seconds (Warm-up)
Chain 2:                0.981 seconds (Sampling)
Chain 2:                1.976 seconds (Total)
Chain 2: 
Chain 4: Iteration: 4000 / 4000 [100%]  (Sampling)
Chain 4: 
Chain 4:  Elapsed Time: 1.06 seconds (Warm-up)
Chain 4:                0.928 seconds (Sampling)
Chain 4:                1.988 seconds (Total)
Chain 4: 
Chain 1: Iteration: 4000 / 4000 [100%]  (Sampling)
Chain 1: 
Chain 1:  Elapsed Time: 1.047 seconds (Warm-up)
Chain 1:                1.083 seconds (Sampling)
Chain 1:                2.13 seconds (Total)
Chain 1: 
 Family: negbinomial 
  Links: mu = identity; shape = identity 
Formula: y ~ 0 - (46 - fmax(x0, x)) * (0 - y0)/(46 - x0) 
         x0 ~ 1
         y0 ~ -1 + male
   Data: data (Number of observations: 38) 
  Draws: 4 chains, each with iter = 4000; warmup = 2000; thin = 2;
         total post-warmup draws = 4000

Population-Level Effects: 
             Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS
x0_Intercept    37.01      4.73    30.24    45.09 1.00     3327     3329
y0_maleT234     92.22     55.37    32.08   241.53 1.00     3421     3227
y0_maleT235    271.35     92.27   132.57   492.56 1.00     3804     3550
y0_maleT236    225.17     87.19   102.32   438.39 1.00     3649     3151
y0_maleT237    218.74    106.53    72.15   472.35 1.00     3725     3342
y0_maleT243    147.63     68.94    58.95   317.87 1.00     3690     3563
y0_maleT244    113.51     56.22    46.34   258.14 1.00     3667     3226
y0_maleT246     78.41     73.70    13.96   291.31 1.00     3298     2906
y0_maleT247    157.96     66.24    70.73   324.02 1.00     3666     3274
y0_maleT257    236.39    108.09    84.80   492.98 1.00     3943     3456
y0_maleT258    119.14     89.86    25.80   372.73 1.00     3599     3541
y0_maleT260    124.06     75.51    36.71   332.51 1.00     3576     3088

Family Specific Parameters: 
      Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS
shape     1.36      0.36     0.78     2.20 1.00     3555     3279

Draws were sampled using sampling(NUTS). For each parameter, Bulk_ESS
and Tail_ESS are effective sample size measures, and Rhat is the potential
scale reduction factor on split chains (at convergence, Rhat = 1).
Warning in eval(ei, envir) : 
Warning in gzfile(file, "wb") :
  cannot open compressed file 'output/fit_tbl_data.Rda-tmp', probable reason 'No such file or directory'
Error in gzfile(file, "wb") : cannot open the connection
> save(file = file.path(output_dir, paste0("fit_tbl_data.Rda-tmp")), fit_tbl)
> + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + > adapt_delta <- 0.95 #0.95
> iter <- 4000
> thin <- 1
> #models <- c("brms")
> #sampling_dist_fit <- "nb" 
> flags_x <- c("uniform_1", "groups_1")
> flags_y <- c("individual", "groups_1")
> N <- length(data)
> fit_tbl <- crossing(#model = models,
+                     #sampling_dist = sampling_dist_fit,
+                     x0_flag = flags_x, y0_flag = flags_y,
+                     desc = "NA_character",
+                     y0_group_list = list(NA), #tbl_tmp, #list(NA),
+                     x0_grou .... [TRUNCATED] 
> ## Priors
> 
> my_priors <- prior(
+   # uniform(10, 1000), nlpar = "y0", lb = 10) +
+   normal(150, 200), nlpar = "y0", lb = 10) +
+   prior(uniform(30, 45.5), lb = 30, ub = 45.5, nlpar = "x0")
> ## Run Analysis
> for(x_flag in flags_x) {
+     for(y_flag in flags_y) {
+ 
+         ## Set up variables for saving model and fit
+         desc <- paste0(model, ": ", x_flag, ", ", y_flag)
+         curr_row <- which(#fit_tbl$model == model &
+                           fit_tbl$x0_flag == x_fla .... [TRUNCATED] 
[1] "brms: uniform_1, individual"
             prior class      coef group resp dpar nlpar lb ub       source
 gamma(0.01, 0.01) shape                                  0         default
            (flat)     b                              x0            default
            (flat)     b Intercept                    x0       (vectorized)
            (flat)     b                              y0            default
            (flat)     b  maleT234                    y0       (vectorized)
            (flat)     b  maleT235                    y0       (vectorized)
            (flat)     b  maleT236                    y0       (vectorized)
            (flat)     b  maleT237                    y0       (vectorized)
            (flat)     b  maleT243                    y0       (vectorized)
            (flat)     b  maleT244                    y0       (vectorized)
            (flat)     b  maleT246                    y0       (vectorized)
            (flat)     b  maleT247                    y0       (vectorized)
            (flat)     b  maleT257                    y0       (vectorized)
            (flat)     b  maleT258                    y0       (vectorized)
            (flat)     b  maleT260                    y0       (vectorized)
Compiling Stan program...
recompiling to avoid crashing R session
Start sampling

SAMPLING FOR MODEL 'anon_model' NOW (CHAIN 1).
Chain 1: 
Chain 1: Gradient evaluation took 0.000101 seconds
Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 1.01 seconds.
Chain 1: Adjust your expectations accordingly!
Chain 1: 
Chain 1: 
Chain 1: Iteration:    1 / 4000 [  0%]  (Warmup)

SAMPLING FOR MODEL 'anon_model' NOW (CHAIN 2).
Chain 2: 
Chain 2: Gradient evaluation took 8.9e-05 seconds
Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.89 seconds.
Chain 2: Adjust your expectations accordingly!
Chain 2: 
Chain 2: 
Chain 2: Iteration:    1 / 4000 [  0%]  (Warmup)

SAMPLING FOR MODEL 'anon_model' NOW (CHAIN 3).
Chain 3: 
Chain 3: Gradient evaluation took 9.8e-05 seconds
Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.98 seconds.
Chain 3: Adjust your expectations accordingly!
Chain 3: 
Chain 3: 
Chain 3: Iteration:    1 / 4000 [  0%]  (Warmup)

SAMPLING FOR MODEL 'anon_model' NOW (CHAIN 4).
Chain 4: 
Chain 4: Gradient evaluation took 0.000107 seconds
Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 1.07 seconds.
Chain 4: Adjust your expectations accordingly!
Chain 4: 
Chain 4: 
Chain 4: Iteration:    1 / 4000 [  0%]  (Warmup)
Chain 1: Iteration:  800 / 4000 [ 20%]  (Warmup)
Chain 2: Iteration:  800 / 4000 [ 20%]  (Warmup)
Chain 4: Iteration:  800 / 4000 [ 20%]  (Warmup)
Chain 3: Iteration:  800 / 4000 [ 20%]  (Warmup)
Chain 1: Iteration: 1600 / 4000 [ 40%]  (Warmup)
Chain 2: Iteration: 1600 / 4000 [ 40%]  (Warmup)
Chain 3: Iteration: 1600 / 4000 [ 40%]  (Warmup)
Chain 4: Iteration: 1600 / 4000 [ 40%]  (Warmup)
Chain 2: Iteration: 2001 / 4000 [ 50%]  (Sampling)
Chain 1: Iteration: 2001 / 4000 [ 50%]  (Sampling)
Chain 3: Iteration: 2001 / 4000 [ 50%]  (Sampling)
Chain 4: Iteration: 2001 / 4000 [ 50%]  (Sampling)
Chain 2: Iteration: 2800 / 4000 [ 70%]  (Sampling)
Chain 1: Iteration: 2800 / 4000 [ 70%]  (Sampling)
Chain 3: Iteration: 2800 / 4000 [ 70%]  (Sampling)
Chain 4: Iteration: 2800 / 4000 [ 70%]  (Sampling)
Chain 2: Iteration: 3600 / 4000 [ 90%]  (Sampling)
Chain 1: Iteration: 3600 / 4000 [ 90%]  (Sampling)
Chain 3: Iteration: 3600 / 4000 [ 90%]  (Sampling)
Chain 4: Iteration: 3600 / 4000 [ 90%]  (Sampling)
Chain 2: Iteration: 4000 / 4000 [100%]  (Sampling)
Chain 2: 
Chain 2:  Elapsed Time: 1.012 seconds (Warm-up)
Chain 2:                0.924 seconds (Sampling)
Chain 2:                1.936 seconds (Total)
Chain 2: 
Chain 1: Iteration: 4000 / 4000 [100%]  (Sampling)
Chain 1: 
Chain 1:  Elapsed Time: 1.032 seconds (Warm-up)
Chain 1:                0.926 seconds (Sampling)
Chain 1:                1.958 seconds (Total)
Chain 1: 
Chain 3: Iteration: 4000 / 4000 [100%]  (Sampling)
Chain 3: 
Chain 3:  Elapsed Time: 1.041 seconds (Warm-up)
Chain 3:                0.933 seconds (Sampling)
Chain 3:                1.974 seconds (Total)
Chain 3: 
Chain 4: Iteration: 4000 / 4000 [100%]  (Sampling)
Chain 4: 
Chain 4:  Elapsed Time: 1.076 seconds (Warm-up)
Chain 4:                0.929 seconds (Sampling)
Chain 4:                2.005 seconds (Total)
Chain 4: 
 Family: negbinomial 
  Links: mu = identity; shape = identity 
Formula: y ~ 0 - (46 - fmax(x0, x)) * (0 - y0)/(46 - x0) 
         x0 ~ 1
         y0 ~ -1 + male
   Data: data (Number of observations: 38) 
  Draws: 4 chains, each with iter = 4000; warmup = 2000; thin = 2;
         total post-warmup draws = 4000

Population-Level Effects: 
             Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS
x0_Intercept    36.91      4.64    30.24    45.10 1.00     3536     3584
y0_maleT234     90.79     56.37    32.16   241.31 1.00     3514     3499
y0_maleT235    275.91     99.38   128.22   513.52 1.00     3870     3675
y0_maleT236    228.16     88.76    99.20   446.67 1.00     3809     3530
y0_maleT237    218.92    106.47    70.50   481.48 1.00     3534     3316
y0_maleT243    146.10     66.34    61.18   321.12 1.00     3555     3606
y0_maleT244    113.89     56.82    45.28   259.40 1.00     3573     3424
y0_maleT246     79.07     75.58    14.52   300.71 1.00     3624     3251
y0_maleT247    160.73     71.53    71.05   351.60 1.00     3775     3586
y0_maleT257    238.01    108.94    83.56   498.45 1.00     3663     3562
y0_maleT258    117.07     87.40    25.21   354.32 1.00     3278     3342
y0_maleT260    123.31     77.39    37.54   330.88 1.00     3850     3517

Family Specific Parameters: 
      Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS
shape     1.36      0.37     0.75     2.22 1.00     3192     3675

Draws were sampled using sampling(NUTS). For each parameter, Bulk_ESS
and Tail_ESS are effective sample size measures, and Rhat is the potential
scale reduction factor on split chains (at convergence, Rhat = 1).
Warning in eval(ei, envir) : 
[1] "brms: uniform_1, groups_1"
               prior class      coef group resp dpar nlpar lb ub       source
   gamma(0.01, 0.01) shape                                  0         default
              (flat)     b                              x0            default
              (flat)     b Intercept                    x0       (vectorized)
              (flat)     b                              y0            default
              (flat)     b Intercept                    y0       (vectorized)
 student_t(3, 0, 63)    sd                              y0  0         default
 student_t(3, 0, 63)    sd            male              y0  0    (vectorized)
 student_t(3, 0, 63)    sd Intercept  male              y0  0    (vectorized)
Compiling Stan program...
Start sampling

SAMPLING FOR MODEL 'anon_model' NOW (CHAIN 1).
Chain 1: 
Chain 1: Gradient evaluation took 0.000115 seconds
Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 1.15 seconds.
Chain 1: Adjust your expectations accordingly!
Chain 1: 
Chain 1: 
Chain 1: Iteration:    1 / 4000 [  0%]  (Warmup)

SAMPLING FOR MODEL 'anon_model' NOW (CHAIN 2).
Chain 2: 
Chain 2: Gradient evaluation took 0.000121 seconds
Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 1.21 seconds.
Chain 2: Adjust your expectations accordingly!
Chain 2: 
Chain 2: 
Chain 2: Iteration:    1 / 4000 [  0%]  (Warmup)

SAMPLING FOR MODEL 'anon_model' NOW (CHAIN 3).
Chain 3: 
Chain 3: Gradient evaluation took 0.0001 seconds
Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 1 seconds.
Chain 3: Adjust your expectations accordingly!
Chain 3: 
Chain 3: 
Chain 3: Iteration:    1 / 4000 [  0%]  (Warmup)

SAMPLING FOR MODEL 'anon_model' NOW (CHAIN 4).
Chain 4: 
Chain 4: Gradient evaluation took 0.000106 seconds
Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 1.06 seconds.
Chain 4: Adjust your expectations accordingly!
Chain 4: 
Chain 4: 
Chain 4: Iteration:    1 / 4000 [  0%]  (Warmup)
Chain 4: Iteration:  800 / 4000 [ 20%]  (Warmup)
Chain 3: Iteration:  800 / 4000 [ 20%]  (Warmup)
Chain 2: Iteration:  800 / 4000 [ 20%]  (Warmup)
Chain 1: Iteration:  800 / 4000 [ 20%]  (Warmup)
Chain 4: Iteration: 1600 / 4000 [ 40%]  (Warmup)
Chain 1: Iteration: 1600 / 4000 [ 40%]  (Warmup)
Chain 2: Iteration: 1600 / 4000 [ 40%]  (Warmup)
Chain 3: Iteration: 1600 / 4000 [ 40%]  (Warmup)
Chain 4: Iteration: 2001 / 4000 [ 50%]  (Sampling)
Chain 1: Iteration: 2001 / 4000 [ 50%]  (Sampling)
Chain 2: Iteration: 2001 / 4000 [ 50%]  (Sampling)
Chain 3: Iteration: 2001 / 4000 [ 50%]  (Sampling)
Chain 4: Iteration: 2800 / 4000 [ 70%]  (Sampling)
Chain 1: Iteration: 2800 / 4000 [ 70%]  (Sampling)
Chain 3: Iteration: 2800 / 4000 [ 70%]  (Sampling)
Chain 3: Iteration: 3600 / 4000 [ 90%]  (Sampling)
Chain 4: Iteration: 3600 / 4000 [ 90%]  (Sampling)
Chain 3: Iteration: 4000 / 4000 [100%]  (Sampling)
Chain 3: 
Chain 3:  Elapsed Time: 5.132 seconds (Warm-up)
Chain 3:                2.018 seconds (Sampling)
Chain 3:                7.15 seconds (Total)
Chain 3: 
Chain 2: Iteration: 2800 / 4000 [ 70%]  (Sampling)
Chain 4: Iteration: 4000 / 4000 [100%]  (Sampling)
Chain 4: 
Chain 4:  Elapsed Time: 4.156 seconds (Warm-up)
Chain 4:                3.273 seconds (Sampling)
Chain 4:                7.429 seconds (Total)
Chain 4: 
Chain 1: Iteration: 3600 / 4000 [ 90%]  (Sampling)
Chain 1: Iteration: 4000 / 4000 [100%]  (Sampling)
Chain 1: 
Chain 1:  Elapsed Time: 4.308 seconds (Warm-up)
Chain 1:                4.028 seconds (Sampling)
Chain 1:                8.336 seconds (Total)
Chain 1: 
Chain 2: Iteration: 3600 / 4000 [ 90%]  (Sampling)
Chain 2: Iteration: 4000 / 4000 [100%]  (Sampling)
Chain 2: 
Chain 2:  Elapsed Time: 4.434 seconds (Warm-up)
Chain 2:                7.119 seconds (Sampling)
Chain 2:                11.553 seconds (Total)
Chain 2: 
Warning: There were 91 divergent transitions after warmup. See
https://mc-stan.org/misc/warnings.html#divergent-transitions-after-warmup
to find out why this is a problem and how to eliminate them.
Warning: Examine the pairs() plot to diagnose sampling problems

Warning: There were 91 divergent transitions after warmup. Increasing adapt_delta above 0.95 may help. See http://mc-stan.org/misc/warnings.html#divergent-transitions-after-warmup
 Family: negbinomial 
  Links: mu = identity; shape = identity 
Formula: y ~ 0 - (46 - fmax(x0, x)) * (0 - y0)/(46 - x0) 
         x0 ~ 1
         y0 ~ (1 || male)
   Data: data (Number of observations: 38) 
  Draws: 4 chains, each with iter = 4000; warmup = 2000; thin = 2;
         total post-warmup draws = 4000

Group-Level Effects: 
~male (Number of levels: 11) 
                 Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS
sd(y0_Intercept)    33.45     22.80     1.54    85.85 1.00     1563     2340

Population-Level Effects: 
             Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS
x0_Intercept    37.22      4.62    30.29    45.02 1.00     3643     3131
y0_Intercept   124.94     24.77    84.08   178.90 1.00     2084     1631

Family Specific Parameters: 
      Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS
shape     1.34      0.35     0.79     2.15 1.00     2782     3158

Draws were sampled using sampling(NUTS). For each parameter, Bulk_ESS
and Tail_ESS are effective sample size measures, and Rhat is the potential
scale reduction factor on split chains (at convergence, Rhat = 1).
Warning in eval(ei, envir) : 
[1] "brms: groups_1, individual"
               prior class      coef group resp dpar nlpar lb ub       source
   gamma(0.01, 0.01) shape                                  0         default
              (flat)     b                              x0            default
              (flat)     b Intercept                    x0       (vectorized)
 student_t(3, 0, 63)    sd                              x0  0         default
 student_t(3, 0, 63)    sd            male              x0  0    (vectorized)
 student_t(3, 0, 63)    sd Intercept  male              x0  0    (vectorized)
              (flat)     b                              y0            default
              (flat)     b  maleT234                    y0       (vectorized)
              (flat)     b  maleT235                    y0       (vectorized)
              (flat)     b  maleT236                    y0       (vectorized)
              (flat)     b  maleT237                    y0       (vectorized)
              (flat)     b  maleT243                    y0       (vectorized)
              (flat)     b  maleT244                    y0       (vectorized)
              (flat)     b  maleT246                    y0       (vectorized)
              (flat)     b  maleT247                    y0       (vectorized)
              (flat)     b  maleT257                    y0       (vectorized)
              (flat)     b  maleT258                    y0       (vectorized)
              (flat)     b  maleT260                    y0       (vectorized)
Compiling Stan program...
Start sampling

SAMPLING FOR MODEL 'anon_model' NOW (CHAIN 1).
Chain 1: 
Chain 1: Gradient evaluation took 0.000138 seconds
Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 1.38 seconds.
Chain 1: Adjust your expectations accordingly!
Chain 1: 
Chain 1: 
Chain 1: Iteration:    1 / 4000 [  0%]  (Warmup)

SAMPLING FOR MODEL 'anon_model' NOW (CHAIN 2).
Chain 2: 
Chain 2: Gradient evaluation took 0.000131 seconds
Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 1.31 seconds.
Chain 2: Adjust your expectations accordingly!
Chain 2: 
Chain 2: 
Chain 2: Iteration:    1 / 4000 [  0%]  (Warmup)

SAMPLING FOR MODEL 'anon_model' NOW (CHAIN 3).
Chain 3: 
Chain 3: Gradient evaluation took 0.000127 seconds
Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 1.27 seconds.
Chain 3: Adjust your expectations accordingly!
Chain 3: 
Chain 3: 
Chain 3: Iteration:    1 / 4000 [  0%]  (Warmup)

SAMPLING FOR MODEL 'anon_model' NOW (CHAIN 4).
Chain 4: 
Chain 4: Gradient evaluation took 0.000127 seconds
Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 1.27 seconds.
Chain 4: Adjust your expectations accordingly!
Chain 4: 
Chain 4: 
Chain 4: Iteration:    1 / 4000 [  0%]  (Warmup)
Chain 4: Iteration:  800 / 4000 [ 20%]  (Warmup)
Chain 1: Iteration:  800 / 4000 [ 20%]  (Warmup)
Chain 2: Iteration:  800 / 4000 [ 20%]  (Warmup)
Chain 3: Iteration:  800 / 4000 [ 20%]  (Warmup)
Chain 4: Iteration: 1600 / 4000 [ 40%]  (Warmup)
Chain 2: Iteration: 1600 / 4000 [ 40%]  (Warmup)
Chain 1: Iteration: 1600 / 4000 [ 40%]  (Warmup)
Chain 3: Iteration: 1600 / 4000 [ 40%]  (Warmup)
Chain 4: Iteration: 2001 / 4000 [ 50%]  (Sampling)
Chain 2: Iteration: 2001 / 4000 [ 50%]  (Sampling)
Chain 1: Iteration: 2001 / 4000 [ 50%]  (Sampling)
Chain 3: Iteration: 2001 / 4000 [ 50%]  (Sampling)
Chain 1: Iteration: 2800 / 4000 [ 70%]  (Sampling)
Chain 2: Iteration: 2800 / 4000 [ 70%]  (Sampling)
Chain 3: Iteration: 2800 / 4000 [ 70%]  (Sampling)
Chain 4: Iteration: 2800 / 4000 [ 70%]  (Sampling)
Chain 1: Iteration: 3600 / 4000 [ 90%]  (Sampling)
Chain 3: Iteration: 3600 / 4000 [ 90%]  (Sampling)
Chain 1: Iteration: 4000 / 4000 [100%]  (Sampling)
Chain 1: 
Chain 1:  Elapsed Time: 7.172 seconds (Warm-up)
Chain 1:                4.702 seconds (Sampling)
Chain 1:                11.874 seconds (Total)
Chain 1: 
Chain 2: Iteration: 3600 / 4000 [ 90%]  (Sampling)
Chain 3: Iteration: 4000 / 4000 [100%]  (Sampling)
Chain 3: 
Chain 3:  Elapsed Time: 7.594 seconds (Warm-up)
Chain 3:                4.603 seconds (Sampling)
Chain 3:                12.197 seconds (Total)
Chain 3: 
Chain 2: Iteration: 4000 / 4000 [100%]  (Sampling)
Chain 2: 
Chain 2:  Elapsed Time: 6.745 seconds (Warm-up)
Chain 2:                6.436 seconds (Sampling)
Chain 2:                13.181 seconds (Total)
Chain 2: 
Chain 4: Iteration: 3600 / 4000 [ 90%]  (Sampling)
Chain 4: Iteration: 4000 / 4000 [100%]  (Sampling)
Chain 4: 
Chain 4:  Elapsed Time: 6.603 seconds (Warm-up)
Chain 4:                8.686 seconds (Sampling)
Chain 4:                15.289 seconds (Total)
Chain 4: 
 Family: negbinomial 
  Links: mu = identity; shape = identity 
Formula: y ~ 0 - (46 - fmax(x0, x)) * (0 - y0)/(46 - x0) 
         x0 ~ (1 || male)
         y0 ~ -1 + male
   Data: data (Number of observations: 38) 
  Draws: 4 chains, each with iter = 4000; warmup = 2000; thin = 2;
         total post-warmup draws = 4000

Group-Level Effects: 
~male (Number of levels: 11) 
                 Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS
sd(x0_Intercept)    33.20     25.51     1.99    97.83 1.00     1933     2181

Population-Level Effects: 
             Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS
x0_Intercept    37.33      4.47    30.37    44.96 1.00     3462     3572
y0_maleT234    144.38    105.03    34.78   426.83 1.00     2576     3423
y0_maleT235    301.68    113.47   134.69   572.50 1.00     3747     3657
y0_maleT236    247.55    103.70   105.95   498.61 1.00     3515     3452
y0_maleT237    246.59    119.76    79.26   536.75 1.00     3628     3728
y0_maleT243    162.60     96.64    56.76   426.39 1.00     2965     3562
y0_maleT244    175.83    111.95    52.18   464.73 1.00     2130     3283
y0_maleT246    115.15    102.50    15.30   392.69 1.00     3105     3283
y0_maleT247    208.78    110.44    76.89   485.07 1.00     3033     3892
y0_maleT257    257.20    119.88    86.31   540.49 1.00     3599     3699
y0_maleT258    160.16    112.81    29.57   442.20 1.00     3111     3597
y0_maleT260    184.16    116.95    42.94   466.43 1.00     3134     3481

Family Specific Parameters: 
      Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS
shape     1.40      0.37     0.78     2.25 1.00     3283     3498

Draws were sampled using sampling(NUTS). For each parameter, Bulk_ESS
and Tail_ESS are effective sample size measures, and Rhat is the potential
scale reduction factor on split chains (at convergence, Rhat = 1).
Warning in eval(ei, envir) : 
[1] "brms: groups_1, groups_1"
               prior class      coef group resp dpar nlpar lb ub       source
   gamma(0.01, 0.01) shape                                  0         default
              (flat)     b                              x0            default
              (flat)     b Intercept                    x0       (vectorized)
 student_t(3, 0, 63)    sd                              x0  0         default
 student_t(3, 0, 63)    sd            male              x0  0    (vectorized)
 student_t(3, 0, 63)    sd Intercept  male              x0  0    (vectorized)
              (flat)     b                              y0            default
              (flat)     b Intercept                    y0       (vectorized)
 student_t(3, 0, 63)    sd                              y0  0         default
 student_t(3, 0, 63)    sd            male              y0  0    (vectorized)
 student_t(3, 0, 63)    sd Intercept  male              y0  0    (vectorized)
Compiling Stan program...
Start sampling

SAMPLING FOR MODEL 'anon_model' NOW (CHAIN 1).
Chain 1: 
Chain 1: Gradient evaluation took 9.5e-05 seconds
Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.95 seconds.
Chain 1: Adjust your expectations accordingly!
Chain 1: 
Chain 1: 
Chain 1: Iteration:    1 / 4000 [  0%]  (Warmup)

SAMPLING FOR MODEL 'anon_model' NOW (CHAIN 2).
Chain 2: 
Chain 2: Gradient evaluation took 9e-05 seconds
Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.9 seconds.
Chain 2: Adjust your expectations accordingly!
Chain 2: 
Chain 2: 
Chain 2: Iteration:    1 / 4000 [  0%]  (Warmup)

SAMPLING FOR MODEL 'anon_model' NOW (CHAIN 3).
Chain 3: 
Chain 3: Gradient evaluation took 8.1e-05 seconds
Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.81 seconds.
Chain 3: Adjust your expectations accordingly!
Chain 3: 
Chain 3: 
Chain 3: Iteration:    1 / 4000 [  0%]  (Warmup)

SAMPLING FOR MODEL 'anon_model' NOW (CHAIN 4).
Chain 4: 
Chain 4: Gradient evaluation took 0.000136 seconds
Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 1.36 seconds.
Chain 4: Adjust your expectations accordingly!
Chain 4: 
Chain 4: 
Chain 4: Iteration:    1 / 4000 [  0%]  (Warmup)
Chain 4: Iteration:  800 / 4000 [ 20%]  (Warmup)
Chain 1: Iteration:  800 / 4000 [ 20%]  (Warmup)
Chain 2: Iteration:  800 / 4000 [ 20%]  (Warmup)
Chain 3: Iteration:  800 / 4000 [ 20%]  (Warmup)
Chain 4: Iteration: 1600 / 4000 [ 40%]  (Warmup)
Chain 3: Iteration: 1600 / 4000 [ 40%]  (Warmup)
Chain 1: Iteration: 1600 / 4000 [ 40%]  (Warmup)
Chain 2: Iteration: 1600 / 4000 [ 40%]  (Warmup)
Chain 3: Iteration: 2001 / 4000 [ 50%]  (Sampling)
Chain 4: Iteration: 2001 / 4000 [ 50%]  (Sampling)
Chain 2: Iteration: 2001 / 4000 [ 50%]  (Sampling)
Chain 1: Iteration: 2001 / 4000 [ 50%]  (Sampling)
Chain 4: Iteration: 2800 / 4000 [ 70%]  (Sampling)
Chain 3: Iteration: 2800 / 4000 [ 70%]  (Sampling)
Chain 2: Iteration: 2800 / 4000 [ 70%]  (Sampling)
Chain 1: Iteration: 2800 / 4000 [ 70%]  (Sampling)
Chain 4: Iteration: 3600 / 4000 [ 90%]  (Sampling)
Chain 4: Iteration: 4000 / 4000 [100%]  (Sampling)
Chain 4: 
Chain 4:  Elapsed Time: 6.932 seconds (Warm-up)
Chain 4:                4.365 seconds (Sampling)
Chain 4:                11.297 seconds (Total)
Chain 4: 
Chain 3: Iteration: 3600 / 4000 [ 90%]  (Sampling)
Chain 1: Iteration: 3600 / 4000 [ 90%]  (Sampling)
Chain 2: Iteration: 3600 / 4000 [ 90%]  (Sampling)
Chain 3: Iteration: 4000 / 4000 [100%]  (Sampling)
Chain 3: 
Chain 3:  Elapsed Time: 6.9 seconds (Warm-up)
Chain 3:                7.725 seconds (Sampling)
Chain 3:                14.625 seconds (Total)
Chain 3: 
Chain 1: Iteration: 4000 / 4000 [100%]  (Sampling)
Chain 1: 
Chain 1:  Elapsed Time: 7.252 seconds (Warm-up)
Chain 1:                7.448 seconds (Sampling)
Chain 1:                14.7 seconds (Total)
Chain 1: 
Chain 2: Iteration: 4000 / 4000 [100%]  (Sampling)
Chain 2: 
Chain 2:  Elapsed Time: 7.178 seconds (Warm-up)
Chain 2:                7.604 seconds (Sampling)
Chain 2:                14.782 seconds (Total)
Chain 2: 
Warning: There were 40 divergent transitions after warmup. See
https://mc-stan.org/misc/warnings.html#divergent-transitions-after-warmup
to find out why this is a problem and how to eliminate them.
Warning: Examine the pairs() plot to diagnose sampling problems

Warning: There were 40 divergent transitions after warmup. Increasing adapt_delta above 0.95 may help. See http://mc-stan.org/misc/warnings.html#divergent-transitions-after-warmup
 Family: negbinomial 
  Links: mu = identity; shape = identity 
Formula: y ~ 0 - (46 - fmax(x0, x)) * (0 - y0)/(46 - x0) 
         x0 ~ (1 || male)
         y0 ~ (1 || male)
   Data: data (Number of observations: 38) 
  Draws: 4 chains, each with iter = 4000; warmup = 2000; thin = 2;
         total post-warmup draws = 4000

Group-Level Effects: 
~male (Number of levels: 11) 
                 Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS
sd(x0_Intercept)    22.20     21.72     0.70    75.02 1.00     2006     2602
sd(y0_Intercept)    35.01     26.82     1.17    99.01 1.00     2365     3002

Population-Level Effects: 
             Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS
x0_Intercept    38.00      4.57    30.43    45.18 1.00     3542     3275
y0_Intercept   147.87     38.89    91.89   242.45 1.00     2775     3217

Family Specific Parameters: 
      Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS
shape     1.34      0.34     0.78     2.12 1.00     3447     3474

Draws were sampled using sampling(NUTS). For each parameter, Bulk_ESS
and Tail_ESS are effective sample size measures, and Rhat is the potential
scale reduction factor on split chains (at convergence, Rhat = 1).
